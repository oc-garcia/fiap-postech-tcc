//APENAS ALGUNS TESTES DE INTERFACE PARA O PROJETO E ENTIDADES NADA AQUI Ã‰ DEFINITIVO

// Enum for School Subjects
enum SchoolSubject {
  Portuguese = "Portuguese",
  Mathematics = "Mathematics",
  Science = "Science",
  History = "History",
  Geography = "Geography",
  PhysicalEducation = "Physical Education",
  Arts = "Arts",
  English = "English",
  Biology = "Biology",
  Chemistry = "Chemistry",
  Physics = "Physics",
  Sociology = "Sociology",
  Philosophy = "Philosophy",
  Other = "Other",
} 

// Interface for Subdisciplines
interface Subdiscipline {
  id: string; // Unique identifier for the subdiscipline
  name: string; // Name of the subdiscipline
  subject: SchoolSubject; // Parent subject of the subdiscipline
}

// Updated Content Interface with Subject and Subdiscipline
interface Content {
  id: string; // Unique identifier for the content
  title: string; // Title of the material
  description: string; // Description or summary of the content
  type: "activity" | "test" | "presentation" | "other"; // Type of content
  creationDate: Date; // Creation date of the content
  authorId: string; // ID of the teacher who created the content
  generatedContent: string; // Text generated by OpenAI
  status: "draft" | "published"; // Status of the content
  upvotes: number; // Number of positive votes
  downvotes: number; // Number of negative votes
  comments: Comment[]; // Comments associated with the content
  tags: string[]; // Tags associated with the content
  visibility: "private" | "public"; // Visibility of the content
  subject: SchoolSubject; // Main subject of the content
  subdisciplineId?: string; // Optional reference to a subdiscipline
}

// Example Subdisciplines
const exampleSubdisciplines: Subdiscipline[] = [
  { id: "1", name: "Grammar", subject: SchoolSubject.Portuguese },
  { id: "2", name: "Literature", subject: SchoolSubject.Portuguese },
  { id: "3", name: "Algebra", subject: SchoolSubject.Mathematics },
  { id: "4", name: "Geometry", subject: SchoolSubject.Mathematics },
  { id: "5", name: "Physics - Mechanics", subject: SchoolSubject.Physics },
  { id: "6", name: "Organic Chemistry", subject: SchoolSubject.Chemistry },
  { id: "7", name: "Brazilian History", subject: SchoolSubject.History },
  { id: "8", name: "Environmental Studies", subject: SchoolSubject.Science },
];

// Example Usage in Content
const exampleContent: Content = {
  id: "content-123",
  title: "Introduction to Algebra",
  description: "Basic concepts of algebra for high school students.",
  type: "activity",
  creationDate: new Date(),
  authorId: "teacher-456",
  generatedContent: "This is a detailed introduction to algebra...",
  status: "published",
  upvotes: 42,
  downvotes: 3,
  comments: [],
  tags: ["Mathematics", "Algebra", "High School"],
  visibility: "public",
  subject: SchoolSubject.Mathematics,
  subdisciplineId: "3", // Reference to the "Algebra" subdiscipline
};

// Interface for User (Teacher)
interface User {
  id: string; // Unique identifier for the user
  name: string; // Teacher's name
  email: string; // Email for authentication and notifications
  password: string; // Access password
  role: "teacher" | "administrator"; // User's role
  contentHistory: string[]; // IDs of contents created by the user
  votesGiven: Vote[]; // Votes given by the user
  contentPreferences?: string[]; // Preferences for types of content
}

// Interface for Vote (Upvote / Downvote)
interface Vote {
  id: string; // Unique identifier for the vote
  contentId: string; // ID of the related content
  userId: string; // ID of the user who gave the vote
  type: "upvote" | "downvote"; // Type of vote
  voteDate: Date; // Date when the vote was given
}

// Interface for Comment
interface Comment {
  id: string; // Unique identifier for the comment
  contentId: string; // ID of the related content
  userId: string; // ID of the user who made the comment
  text: string; // Body of the comment
  creationDate: Date; // Creation date of the comment
}

// Interface for Content Creation Form
interface ContentCreationForm {
  id: string; // Unique identifier for the form
  fields: {
    [field: string]: string | number | boolean; // Form fields with generic keys
  };
  generationParameters: {
    theme: string;
    style: string;
    depth: number; // Depth or level of detail
  };
  submissionDate: Date; // Submission date of the form
  generatedContentId: string; // ID of the generated content
}

// Interface for Content Feed
interface ContentFeed {
  id: string; // Unique identifier for the feed
  userId: string; // ID of the user accessing the feed
  visibleContents: Content[]; // List of visible contents
  sortingCriteria: "popularity" | "date" | "votes"; // Sorting criteria for the feed
}
